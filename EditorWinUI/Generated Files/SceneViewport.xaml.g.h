//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#pragma once


namespace winrt::EditorWinUI::implementation
{
    using IInspectable = ::winrt::Windows::Foundation::IInspectable;

    template <typename D, typename ... I>
    struct SceneViewportT : public ::winrt::EditorWinUI::implementation::SceneViewport_base<D,
        ::winrt::Windows::UI::Xaml::Markup::IComponentConnector,
        ::winrt::Windows::UI::Xaml::Markup::IComponentConnector2,
        I...>
    {
        using base_type = typename SceneViewportT::base_type;
        using base_type::base_type;
        using class_type = typename SceneViewportT::class_type;

        void InitializeComponent();
        void Connect(int32_t connectionId, IInspectable const& target);
        ::winrt::Windows::UI::Xaml::Markup::IComponentConnector GetBindingConnector(int32_t connectionId, IInspectable const& target);
        void UnloadObject(::winrt::Windows::UI::Xaml::DependencyObject const& dependencyObject);
        void DisconnectUnloadedObject(int32_t connectionId);

        ::winrt::Windows::UI::Xaml::Controls::Grid grid()
        {
            return _grid;
        }
        void grid(::winrt::Windows::UI::Xaml::Controls::Grid value)
        {
            _grid = value;
        }

        ::winrt::Windows::UI::Xaml::Controls::SwapChainPanel swapChain()
        {
            return _swapChain;
        }
        void swapChain(::winrt::Windows::UI::Xaml::Controls::SwapChainPanel value)
        {
            _swapChain = value;
        }
        
    protected:
        bool _contentLoaded{false};

    private:
        struct SceneViewport_obj1_Bindings;

        ::winrt::Windows::UI::Xaml::Controls::Grid _grid{nullptr};
        ::winrt::Windows::UI::Xaml::Controls::SwapChainPanel _swapChain{nullptr};
    };
}


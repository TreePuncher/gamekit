//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include <memory>

#include "XamlTypeInfo.xaml.g.h"

#include "MainPage.h"
#include "App.h"
#include "SceneViewport.h"
#include "XamlBindingInfo.xaml.g.hpp"
#include "MainPage.xaml.g.hpp"
#include "App.xaml.g.hpp"
#include "SceneViewport.xaml.g.hpp"

namespace winrt::EditorWinUI::implementation
{
using IXamlMember = ::winrt::Windows::UI::Xaml::Markup::IXamlMember;
using IXamlType = ::winrt::Windows::UI::Xaml::Markup::IXamlType;
using TypeKind = ::winrt::Windows::UI::Xaml::Interop::TypeKind;

template <typename T>
::winrt::Windows::Foundation::IInspectable ActivateType()
{
    return T();
}

template <typename T>
::winrt::Windows::Foundation::IInspectable ActivateLocalType()
{
    return ::winrt::make<T>();
}

template<typename TInstance, typename TItem>
void CollectionAdd(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& item)
{
    instance.as<TInstance>().Append(::winrt::unbox_value<TItem>(item));
}

template<typename TInstance, typename TKey, typename TItem>
void DictionaryAdd(
    ::winrt::Windows::Foundation::IInspectable const& instance,
    ::winrt::Windows::Foundation::IInspectable const& key,
    ::winrt::Windows::Foundation::IInspectable const& item)
{
    instance.as<TInstance>().Insert(::winrt::unbox_value<TKey>(key), ::winrt::unbox_value<TItem>(item));
}

template<typename T>
::winrt::Windows::Foundation::IInspectable FromStringConverter(
    XamlUserType const& userType, 
    ::winrt::hstring const& input)
{
    return ::winrt::box_value(static_cast<T>(userType.CreateEnumUIntFromString(input)));
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_TabWidthMode(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().TabWidthMode());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_SelectedIndex(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().SelectedIndex());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_IsAddTabButtonVisible(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().IsAddTabButtonVisible());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_CloseButtonOverlayMode(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().CloseButtonOverlayMode());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_CanReorderTabs(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().CanReorderTabs());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_CanDragTabs(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().CanDragTabs());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_AllowDropTabs(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().AllowDropTabs());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_MyProperty(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().MyProperty());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_IsExpanded(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().IsExpanded());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_HasUnrealizedChildren(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().HasUnrealizedChildren());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_Depth(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().Depth());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_HasChildren(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().HasChildren());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_Title(::winrt::Windows::Foundation::IInspectable const& instance)
{
   return ::winrt::box_value(::winrt::Windows::Foundation::PropertyValue::CreateString(instance.as<T>().Title()));
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_Items(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().Items());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_TabItems(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().TabItems());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_TabStripHeaderTemplate(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().TabStripHeaderTemplate());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_TabStripHeader(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().TabStripHeader());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_TabStripFooterTemplate(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().TabStripFooterTemplate());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_TabStripFooter(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().TabStripFooter());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_TabItemsSource(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().TabItemsSource());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_TabItemTemplateSelector(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().TabItemTemplateSelector());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_TabItemTemplate(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().TabItemTemplate());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_SelectedItem(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().SelectedItem());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_AddTabButtonCommandParameter(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().AddTabButtonCommandParameter());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_AddTabButtonCommand(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().AddTabButtonCommand());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_Content(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().Content());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_Children(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().Children());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_Parent(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().Parent());
}

template<typename TDeclaringType, typename TValue>
void SetEnumMember_TabWidthMode(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().TabWidthMode(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetEnumMember_CloseButtonOverlayMode(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().CloseButtonOverlayMode(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_SelectedIndex(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().SelectedIndex(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_IsAddTabButtonVisible(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().IsAddTabButtonVisible(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_CanReorderTabs(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().CanReorderTabs(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_CanDragTabs(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().CanDragTabs(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_AllowDropTabs(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().AllowDropTabs(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_MyProperty(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().MyProperty(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_IsExpanded(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().IsExpanded(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_HasUnrealizedChildren(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().HasUnrealizedChildren(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_Title(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    return instance.as<TDeclaringType>().Title(::winrt::unbox_value<::winrt::hstring>(value));
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_TabStripHeaderTemplate(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().TabStripHeaderTemplate(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_TabStripHeader(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().TabStripHeader(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_TabStripFooterTemplate(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().TabStripFooterTemplate(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_TabStripFooter(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().TabStripFooter(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_TabItemsSource(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().TabItemsSource(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_TabItemTemplateSelector(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().TabItemTemplateSelector(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_TabItemTemplate(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().TabItemTemplate(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_SelectedItem(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().SelectedItem(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_AddTabButtonCommandParameter(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().AddTabButtonCommandParameter(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_AddTabButtonCommand(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().AddTabButtonCommand(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_Content(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().Content(value.as<TValue>());
}

enum TypeInfo_Flags
{
    TypeInfo_Flags_None                 = 0x00,
    TypeInfo_Flags_IsLocalType          = 0x01,
    TypeInfo_Flags_IsSystemType         = 0x02,
    TypeInfo_Flags_IsReturnTypeStub     = 0x04,
    TypeInfo_Flags_IsBindable           = 0x08,
    TypeInfo_Flags_IsMarkupExtension    = 0x10, 
};

struct TypeInfo
{
    const wchar_t* typeName{nullptr};
    const wchar_t* contentPropertyName{nullptr};
    ::winrt::Windows::Foundation::IInspectable (*activator)();
    void (*collectionAdd)(::winrt::Windows::Foundation::IInspectable const&, ::winrt::Windows::Foundation::IInspectable const&);
    void (*dictionaryAdd)(::winrt::Windows::Foundation::IInspectable const&, ::winrt::Windows::Foundation::IInspectable const&, ::winrt::Windows::Foundation::IInspectable const&);
    ::winrt::Windows::Foundation::IInspectable (*fromStringConverter)(XamlUserType const&, ::winrt::hstring const& );
    int     baseTypeIndex;
    int     firstMemberIndex;
    int     firstEnumValueIndex;
    int     createFromStringIndex;
    TypeKind kindOfType;
    unsigned int flags;
    int boxedTypeIndex;
};


const TypeInfo TypeInfos[] = 
{
    //   0
    L"Int32", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //   1
    L"Object", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //   2
    L"String", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //   3
    L"Boolean", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //   4
    L"System.Enum", L"",
    nullptr, nullptr, nullptr, nullptr,
    5, // System.ValueType
    0, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_None,
    -1,
    //   5
    L"System.ValueType", L"",
    nullptr, nullptr, nullptr, nullptr,
    1, // Object
    0, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_None,
    -1,
    //   6
    L"EditorWinUI.MainPage", L"",
    &ActivateLocalType<::winrt::EditorWinUI::implementation::MainPage>, nullptr, nullptr, nullptr,
    9, // Windows.UI.Xaml.Controls.Page
    0, 0, -1, TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    -1,
    //   7
    L"EditorWinUI.SceneViewport", L"",
    &ActivateLocalType<::winrt::EditorWinUI::implementation::SceneViewport>, nullptr, nullptr, nullptr,
    9, // Windows.UI.Xaml.Controls.Page
    1, 0, -1, TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    -1,
    //   8
    L"Windows.UI.Xaml.DataTemplate", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    1, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //   9
    L"Windows.UI.Xaml.Controls.Page", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    1, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  10
    L"Windows.UI.Xaml.Input.ICommand", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    1, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  11
    L"Windows.UI.Xaml.Controls.Control", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    1, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  12
    L"Windows.UI.Xaml.DependencyObject", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    1, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  13
    L"Windows.UI.Xaml.ResourceDictionary", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    1, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  14
    L"Microsoft.UI.Xaml.Controls.MenuBar", L"Microsoft.UI.Xaml.Controls.MenuBar.Items",
    &ActivateType<::winrt::Microsoft::UI::Xaml::Controls::MenuBar>, nullptr, nullptr, nullptr,
    11, // Windows.UI.Xaml.Controls.Control
    1, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_None,
    -1,
    //  15
    L"Microsoft.UI.Xaml.Controls.TabView", L"Microsoft.UI.Xaml.Controls.TabView.TabItems",
    &ActivateType<::winrt::Microsoft::UI::Xaml::Controls::TabView>, nullptr, nullptr, nullptr,
    11, // Windows.UI.Xaml.Controls.Control
    2, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_None,
    -1,
    //  16
    L"Windows.UI.Xaml.Controls.UserControl", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    20, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  17
    L"Windows.UI.Xaml.Controls.TreeViewNode", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    20, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  18
    L"Microsoft.UI.Xaml.Controls.MenuBarItem", L"Microsoft.UI.Xaml.Controls.MenuBarItem.Items",
    &ActivateType<::winrt::Microsoft::UI::Xaml::Controls::MenuBarItem>, nullptr, nullptr, nullptr,
    11, // Windows.UI.Xaml.Controls.Control
    20, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_None,
    -1,
    //  19
    L"Microsoft.UI.Xaml.Controls.TreeViewNode", L"",
    &ActivateType<::winrt::Microsoft::UI::Xaml::Controls::TreeViewNode>, nullptr, nullptr, nullptr,
    12, // Windows.UI.Xaml.DependencyObject
    22, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsBindable | TypeInfo_Flags_None,
    -1,
    //  20
    L"Windows.UI.Xaml.Controls.MenuFlyoutItemBase", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    29, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  21
    L"Microsoft.UI.Xaml.Controls.TabViewWidthMode", L"",
    nullptr, nullptr, nullptr, &FromStringConverter<::winrt::Microsoft::UI::Xaml::Controls::TabViewWidthMode>,
    4, // System.Enum
    29, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_None,
    -1,
    //  22
    L"Windows.UI.Xaml.Controls.DataTemplateSelector", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    29, 3, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  23
    L"Microsoft.UI.Xaml.Controls.XamlControlsResources", L"",
    &ActivateType<::winrt::Microsoft::UI::Xaml::Controls::XamlControlsResources>, nullptr, &DictionaryAdd<::winrt::Microsoft::UI::Xaml::Controls::XamlControlsResources, ::winrt::Windows::Foundation::IInspectable, ::winrt::Windows::Foundation::IInspectable>, nullptr,
    13, // Windows.UI.Xaml.ResourceDictionary
    29, 3, -1, TypeKind::Metadata,
    TypeInfo_Flags_None,
    -1,
    //  24
    L"Windows.Foundation.Collections.IVector`1<Object>", L"",
    nullptr, &CollectionAdd<::winrt::Windows::Foundation::Collections::IVector<::winrt::Windows::Foundation::IInspectable>, ::winrt::Windows::Foundation::IInspectable>, nullptr, nullptr,
    -1,
    29, 3, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsReturnTypeStub | TypeInfo_Flags_None,
    -1,
    //  25
    L"Microsoft.UI.Xaml.Controls.TabViewCloseButtonOverlayMode", L"",
    nullptr, nullptr, nullptr, &FromStringConverter<::winrt::Microsoft::UI::Xaml::Controls::TabViewCloseButtonOverlayMode>,
    4, // System.Enum
    29, 3, -1, TypeKind::Metadata,
    TypeInfo_Flags_None,
    -1,
    //  26
    L"Windows.Foundation.Collections.IVector`1<Microsoft.UI.Xaml.Controls.MenuBarItem>", L"",
    nullptr, &CollectionAdd<::winrt::Windows::Foundation::Collections::IVector<::winrt::Microsoft::UI::Xaml::Controls::MenuBarItem>, ::winrt::Microsoft::UI::Xaml::Controls::MenuBarItem>, nullptr, nullptr,
    -1,
    29, 6, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsReturnTypeStub | TypeInfo_Flags_None,
    -1,
    //  27
    L"Windows.Foundation.Collections.IVector`1<Microsoft.UI.Xaml.Controls.TreeViewNode>", L"",
    nullptr, &CollectionAdd<::winrt::Windows::Foundation::Collections::IVector<::winrt::Microsoft::UI::Xaml::Controls::TreeViewNode>, ::winrt::Microsoft::UI::Xaml::Controls::TreeViewNode>, nullptr, nullptr,
    -1,
    29, 6, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsReturnTypeStub | TypeInfo_Flags_None,
    -1,
    //  28
    L"Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Controls.MenuFlyoutItemBase>", L"",
    nullptr, &CollectionAdd<::winrt::Windows::Foundation::Collections::IVector<::winrt::Windows::UI::Xaml::Controls::MenuFlyoutItemBase>, ::winrt::Windows::UI::Xaml::Controls::MenuFlyoutItemBase>, nullptr, nullptr,
    -1,
    29, 6, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsReturnTypeStub | TypeInfo_Flags_None,
    -1,
    //  Last type here is for padding
    L"", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1, 
    29, 6, -1, TypeKind::Custom,
    TypeInfo_Flags_None,
};

constexpr uint32_t TypeInfoLookup[] = { 
      0,   //   0
      0,   //   1
      0,   //   2
      0,   //   3
      0,   //   4
      0,   //   5
      1,   //   6
      3,   //   7
      4,   //   8
      4,   //   9
      4,   //  10
      4,   //  11
      5,   //  12
      5,   //  13
      5,   //  14
      5,   //  15
      5,   //  16
      6,   //  17
      6,   //  18
      6,   //  19
      6,   //  20
      7,   //  21
      7,   //  22
      7,   //  23
      7,   //  24
      7,   //  25
      8,   //  26
      8,   //  27
      8,   //  28
      9,   //  29
     10,   //  30
     11,   //  31
     11,   //  32
     13,   //  33
     13,   //  34
     16,   //  35
     16,   //  36
     17,   //  37
     18,   //  38
     19,   //  39
     20,   //  40
     20,   //  41
     20,   //  42
     20,   //  43
     22,   //  44
     22,   //  45
     23,   //  46
     23,   //  47
     23,   //  48
     25,   //  49
     25,   //  50
     25,   //  51
     25,   //  52
     25,   //  53
     25,   //  54
     25,   //  55
     25,   //  56
     26,   //  57
     26,   //  58
     26,   //  59
     26,   //  60
     26,   //  61
     26,   //  62
     26,   //  63
     26,   //  64
     26,   //  65
     26,   //  66
     26,   //  67
     26,   //  68
     26,   //  69
     26,   //  70
     26,   //  71
     26,   //  72
     26,   //  73
     26,   //  74
     26,   //  75
     26,   //  76
     26,   //  77
     26,   //  78
     26,   //  79
     26,   //  80
     27,   //  81
     28,   //  82
     28,   //  83
     28,   //  84
     28,   //  85
     29,   //  86
};

struct EnumValueInfo
{
    const wchar_t* name{nullptr};
    int eValue;
};

const EnumValueInfo EnumValues[] =
{ 
    L"Equal", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::TabViewWidthMode::Equal),
    L"SizeToContent", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::TabViewWidthMode::SizeToContent),
    L"Compact", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::TabViewWidthMode::Compact),
    L"Auto", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::TabViewCloseButtonOverlayMode::Auto),
    L"OnPointerOver", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::TabViewCloseButtonOverlayMode::OnPointerOver),
    L"Always", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::TabViewCloseButtonOverlayMode::Always),
};

struct MemberInfo 
{
    const wchar_t* shortName{nullptr};
    ::winrt::Windows::Foundation::IInspectable (*getter)(::winrt::Windows::Foundation::IInspectable const&);
    void (*setter)(::winrt::Windows::Foundation::IInspectable const&, ::winrt::Windows::Foundation::IInspectable const&);
    int typeIndex;
    int targetTypeIndex;
    bool isReadOnly;
    bool isDependencyProperty;
    bool isAttachable;
};

const MemberInfo MemberInfos[] = 
{
    //   0 - EditorWinUI.MainPage.MyProperty
    L"MyProperty",
    &GetValueTypeMember_MyProperty<::winrt::EditorWinUI::MainPage, int32_t>,
    &SetValueTypeMember_MyProperty<::winrt::EditorWinUI::MainPage, int32_t>,
    0, // Int32
    -1,
    false, false, false,
    //   1 - Microsoft.UI.Xaml.Controls.MenuBar.Items
    L"Items",
    &GetReferenceTypeMember_Items<::winrt::Microsoft::UI::Xaml::Controls::MenuBar>,
    nullptr,
    26, // Windows.Foundation.Collections.IVector`1<Microsoft.UI.Xaml.Controls.MenuBarItem>
    -1,
    true,  true,  false,
    //   2 - Microsoft.UI.Xaml.Controls.TabView.TabItems
    L"TabItems",
    &GetReferenceTypeMember_TabItems<::winrt::Microsoft::UI::Xaml::Controls::TabView>,
    nullptr,
    24, // Windows.Foundation.Collections.IVector`1<Object>
    -1,
    true,  true,  false,
    //   3 - Microsoft.UI.Xaml.Controls.TabView.TabWidthMode
    L"TabWidthMode",
    &GetValueTypeMember_TabWidthMode<::winrt::Microsoft::UI::Xaml::Controls::TabView, ::winrt::Microsoft::UI::Xaml::Controls::TabViewWidthMode>,
    &SetEnumMember_TabWidthMode<::winrt::Microsoft::UI::Xaml::Controls::TabView, ::winrt::Microsoft::UI::Xaml::Controls::TabViewWidthMode>,
    21, // Microsoft.UI.Xaml.Controls.TabViewWidthMode
    -1,
    false, true,  false,
    //   4 - Microsoft.UI.Xaml.Controls.TabView.TabStripHeaderTemplate
    L"TabStripHeaderTemplate",
    &GetReferenceTypeMember_TabStripHeaderTemplate<::winrt::Microsoft::UI::Xaml::Controls::TabView>,
    &SetReferenceTypeMember_TabStripHeaderTemplate<::winrt::Microsoft::UI::Xaml::Controls::TabView, ::winrt::Windows::UI::Xaml::DataTemplate>,
    8, // Windows.UI.Xaml.DataTemplate
    -1,
    false, true,  false,
    //   5 - Microsoft.UI.Xaml.Controls.TabView.TabStripHeader
    L"TabStripHeader",
    &GetReferenceTypeMember_TabStripHeader<::winrt::Microsoft::UI::Xaml::Controls::TabView>,
    &SetReferenceTypeMember_TabStripHeader<::winrt::Microsoft::UI::Xaml::Controls::TabView, ::winrt::Windows::Foundation::IInspectable>,
    1, // Object
    -1,
    false, true,  false,
    //   6 - Microsoft.UI.Xaml.Controls.TabView.TabStripFooterTemplate
    L"TabStripFooterTemplate",
    &GetReferenceTypeMember_TabStripFooterTemplate<::winrt::Microsoft::UI::Xaml::Controls::TabView>,
    &SetReferenceTypeMember_TabStripFooterTemplate<::winrt::Microsoft::UI::Xaml::Controls::TabView, ::winrt::Windows::UI::Xaml::DataTemplate>,
    8, // Windows.UI.Xaml.DataTemplate
    -1,
    false, true,  false,
    //   7 - Microsoft.UI.Xaml.Controls.TabView.TabStripFooter
    L"TabStripFooter",
    &GetReferenceTypeMember_TabStripFooter<::winrt::Microsoft::UI::Xaml::Controls::TabView>,
    &SetReferenceTypeMember_TabStripFooter<::winrt::Microsoft::UI::Xaml::Controls::TabView, ::winrt::Windows::Foundation::IInspectable>,
    1, // Object
    -1,
    false, true,  false,
    //   8 - Microsoft.UI.Xaml.Controls.TabView.TabItemsSource
    L"TabItemsSource",
    &GetReferenceTypeMember_TabItemsSource<::winrt::Microsoft::UI::Xaml::Controls::TabView>,
    &SetReferenceTypeMember_TabItemsSource<::winrt::Microsoft::UI::Xaml::Controls::TabView, ::winrt::Windows::Foundation::IInspectable>,
    1, // Object
    -1,
    false, true,  false,
    //   9 - Microsoft.UI.Xaml.Controls.TabView.TabItemTemplateSelector
    L"TabItemTemplateSelector",
    &GetReferenceTypeMember_TabItemTemplateSelector<::winrt::Microsoft::UI::Xaml::Controls::TabView>,
    &SetReferenceTypeMember_TabItemTemplateSelector<::winrt::Microsoft::UI::Xaml::Controls::TabView, ::winrt::Windows::UI::Xaml::Controls::DataTemplateSelector>,
    22, // Windows.UI.Xaml.Controls.DataTemplateSelector
    -1,
    false, true,  false,
    //  10 - Microsoft.UI.Xaml.Controls.TabView.TabItemTemplate
    L"TabItemTemplate",
    &GetReferenceTypeMember_TabItemTemplate<::winrt::Microsoft::UI::Xaml::Controls::TabView>,
    &SetReferenceTypeMember_TabItemTemplate<::winrt::Microsoft::UI::Xaml::Controls::TabView, ::winrt::Windows::UI::Xaml::DataTemplate>,
    8, // Windows.UI.Xaml.DataTemplate
    -1,
    false, true,  false,
    //  11 - Microsoft.UI.Xaml.Controls.TabView.SelectedItem
    L"SelectedItem",
    &GetReferenceTypeMember_SelectedItem<::winrt::Microsoft::UI::Xaml::Controls::TabView>,
    &SetReferenceTypeMember_SelectedItem<::winrt::Microsoft::UI::Xaml::Controls::TabView, ::winrt::Windows::Foundation::IInspectable>,
    1, // Object
    -1,
    false, true,  false,
    //  12 - Microsoft.UI.Xaml.Controls.TabView.SelectedIndex
    L"SelectedIndex",
    &GetValueTypeMember_SelectedIndex<::winrt::Microsoft::UI::Xaml::Controls::TabView, int32_t>,
    &SetValueTypeMember_SelectedIndex<::winrt::Microsoft::UI::Xaml::Controls::TabView, int32_t>,
    0, // Int32
    -1,
    false, true,  false,
    //  13 - Microsoft.UI.Xaml.Controls.TabView.IsAddTabButtonVisible
    L"IsAddTabButtonVisible",
    &GetValueTypeMember_IsAddTabButtonVisible<::winrt::Microsoft::UI::Xaml::Controls::TabView, bool>,
    &SetValueTypeMember_IsAddTabButtonVisible<::winrt::Microsoft::UI::Xaml::Controls::TabView, bool>,
    3, // Boolean
    -1,
    false, true,  false,
    //  14 - Microsoft.UI.Xaml.Controls.TabView.CloseButtonOverlayMode
    L"CloseButtonOverlayMode",
    &GetValueTypeMember_CloseButtonOverlayMode<::winrt::Microsoft::UI::Xaml::Controls::TabView, ::winrt::Microsoft::UI::Xaml::Controls::TabViewCloseButtonOverlayMode>,
    &SetEnumMember_CloseButtonOverlayMode<::winrt::Microsoft::UI::Xaml::Controls::TabView, ::winrt::Microsoft::UI::Xaml::Controls::TabViewCloseButtonOverlayMode>,
    25, // Microsoft.UI.Xaml.Controls.TabViewCloseButtonOverlayMode
    -1,
    false, true,  false,
    //  15 - Microsoft.UI.Xaml.Controls.TabView.CanReorderTabs
    L"CanReorderTabs",
    &GetValueTypeMember_CanReorderTabs<::winrt::Microsoft::UI::Xaml::Controls::TabView, bool>,
    &SetValueTypeMember_CanReorderTabs<::winrt::Microsoft::UI::Xaml::Controls::TabView, bool>,
    3, // Boolean
    -1,
    false, true,  false,
    //  16 - Microsoft.UI.Xaml.Controls.TabView.CanDragTabs
    L"CanDragTabs",
    &GetValueTypeMember_CanDragTabs<::winrt::Microsoft::UI::Xaml::Controls::TabView, bool>,
    &SetValueTypeMember_CanDragTabs<::winrt::Microsoft::UI::Xaml::Controls::TabView, bool>,
    3, // Boolean
    -1,
    false, true,  false,
    //  17 - Microsoft.UI.Xaml.Controls.TabView.AllowDropTabs
    L"AllowDropTabs",
    &GetValueTypeMember_AllowDropTabs<::winrt::Microsoft::UI::Xaml::Controls::TabView, bool>,
    &SetValueTypeMember_AllowDropTabs<::winrt::Microsoft::UI::Xaml::Controls::TabView, bool>,
    3, // Boolean
    -1,
    false, true,  false,
    //  18 - Microsoft.UI.Xaml.Controls.TabView.AddTabButtonCommandParameter
    L"AddTabButtonCommandParameter",
    &GetReferenceTypeMember_AddTabButtonCommandParameter<::winrt::Microsoft::UI::Xaml::Controls::TabView>,
    &SetReferenceTypeMember_AddTabButtonCommandParameter<::winrt::Microsoft::UI::Xaml::Controls::TabView, ::winrt::Windows::Foundation::IInspectable>,
    1, // Object
    -1,
    false, true,  false,
    //  19 - Microsoft.UI.Xaml.Controls.TabView.AddTabButtonCommand
    L"AddTabButtonCommand",
    &GetReferenceTypeMember_AddTabButtonCommand<::winrt::Microsoft::UI::Xaml::Controls::TabView>,
    &SetReferenceTypeMember_AddTabButtonCommand<::winrt::Microsoft::UI::Xaml::Controls::TabView, ::winrt::Windows::UI::Xaml::Input::ICommand>,
    10, // Windows.UI.Xaml.Input.ICommand
    -1,
    false, true,  false,
    //  20 - Microsoft.UI.Xaml.Controls.MenuBarItem.Items
    L"Items",
    &GetReferenceTypeMember_Items<::winrt::Microsoft::UI::Xaml::Controls::MenuBarItem>,
    nullptr,
    28, // Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Controls.MenuFlyoutItemBase>
    -1,
    true,  true,  false,
    //  21 - Microsoft.UI.Xaml.Controls.MenuBarItem.Title
    L"Title",
    &GetReferenceTypeMember_Title<::winrt::Microsoft::UI::Xaml::Controls::MenuBarItem>,
    &SetReferenceTypeMember_Title<::winrt::Microsoft::UI::Xaml::Controls::MenuBarItem, ::winrt::hstring>,
    2, // String
    -1,
    false, true,  false,
    //  22 - Microsoft.UI.Xaml.Controls.TreeViewNode.IsExpanded
    L"IsExpanded",
    &GetValueTypeMember_IsExpanded<::winrt::Microsoft::UI::Xaml::Controls::TreeViewNode, bool>,
    &SetValueTypeMember_IsExpanded<::winrt::Microsoft::UI::Xaml::Controls::TreeViewNode, bool>,
    3, // Boolean
    -1,
    false, true,  false,
    //  23 - Microsoft.UI.Xaml.Controls.TreeViewNode.HasUnrealizedChildren
    L"HasUnrealizedChildren",
    &GetValueTypeMember_HasUnrealizedChildren<::winrt::Microsoft::UI::Xaml::Controls::TreeViewNode, bool>,
    &SetValueTypeMember_HasUnrealizedChildren<::winrt::Microsoft::UI::Xaml::Controls::TreeViewNode, bool>,
    3, // Boolean
    -1,
    false, false, false,
    //  24 - Microsoft.UI.Xaml.Controls.TreeViewNode.Content
    L"Content",
    &GetReferenceTypeMember_Content<::winrt::Microsoft::UI::Xaml::Controls::TreeViewNode>,
    &SetReferenceTypeMember_Content<::winrt::Microsoft::UI::Xaml::Controls::TreeViewNode, ::winrt::Windows::Foundation::IInspectable>,
    1, // Object
    -1,
    false, true,  false,
    //  25 - Microsoft.UI.Xaml.Controls.TreeViewNode.Children
    L"Children",
    &GetReferenceTypeMember_Children<::winrt::Microsoft::UI::Xaml::Controls::TreeViewNode>,
    nullptr,
    27, // Windows.Foundation.Collections.IVector`1<Microsoft.UI.Xaml.Controls.TreeViewNode>
    -1,
    true,  false, false,
    //  26 - Microsoft.UI.Xaml.Controls.TreeViewNode.Depth
    L"Depth",
    &GetValueTypeMember_Depth<::winrt::Microsoft::UI::Xaml::Controls::TreeViewNode, int32_t>,
    nullptr,
    0, // Int32
    -1,
    true,  true,  false,
    //  27 - Microsoft.UI.Xaml.Controls.TreeViewNode.HasChildren
    L"HasChildren",
    &GetValueTypeMember_HasChildren<::winrt::Microsoft::UI::Xaml::Controls::TreeViewNode, bool>,
    nullptr,
    3, // Boolean
    -1,
    true,  true,  false,
    //  28 - Microsoft.UI.Xaml.Controls.TreeViewNode.Parent
    L"Parent",
    &GetReferenceTypeMember_Parent<::winrt::Microsoft::UI::Xaml::Controls::TreeViewNode>,
    nullptr,
    19, // Microsoft.UI.Xaml.Controls.TreeViewNode
    -1,
    true,  false, false,
};

const wchar_t* GetShortName(const wchar_t* longName)
{
    const auto separator = wcsrchr(longName, '.');
    return separator ? separator + 1: longName;
}

const TypeInfo* GetTypeInfo(::winrt::hstring const& typeName)
{
    size_t typeNameLength = typeName.size();
    if (typeNameLength < _countof(TypeInfoLookup) - 1)
    {
        const auto begin = TypeInfos + TypeInfoLookup[typeNameLength];
        const auto end = TypeInfos + TypeInfoLookup[typeNameLength + 1];
        auto pos = std::find_if(begin, end, [&typeName](TypeInfo const& elem)
        {
            return wcscmp(typeName.data(), elem.typeName) == 0;
        });
        if (pos != end)
        {
            return pos;
        }
    }
    return nullptr;
}

const MemberInfo* GetMemberInfo(::winrt::hstring const& longMemberName)
{
    const auto dotPosition = std::find(longMemberName.crbegin(), longMemberName.crend(), L'.').base();
    if (dotPosition != longMemberName.end())
    {
        const auto sizeBeforeDot = static_cast<::winrt::hstring::size_type>(dotPosition - longMemberName.begin()) - 1;
        const TypeInfo* pTypeInfo = GetTypeInfo(::winrt::hstring{longMemberName.data(), sizeBeforeDot});
        if (pTypeInfo)
        {
            const TypeInfo* pNextTypeInfo = pTypeInfo + 1;
            const auto shortMemberName = GetShortName(longMemberName.data());
            const auto begin = MemberInfos + pTypeInfo->firstMemberIndex;
            const auto end = MemberInfos + pNextTypeInfo->firstMemberIndex;
            auto info = std::find_if(begin, end,
                [shortMemberName](const MemberInfo& elem)
            {
                return wcscmp(shortMemberName, elem.shortName) == 0;
            });
            if (info != end)
            {
                return info;
            }
        }
    }
    return nullptr;
}

std::vector<::winrt::Windows::UI::Xaml::Markup::IXamlMetadataProvider> const& XamlTypeInfoProvider::OtherProviders()
{
    if (_otherProviders.empty())
    {
        _otherProviders.push_back(::winrt::Microsoft::UI::Xaml::XamlTypeInfo::XamlControlsXamlMetaDataProvider());
        _otherProviders.push_back(::winrt::Microsoft::UI::Xaml::XamlTypeInfo::XamlControlsXamlMetaDataProvider());
    }
    return _otherProviders;
}

IXamlType XamlTypeInfoProvider::CreateXamlType(::winrt::hstring const& typeName)
{
    const TypeInfo* pTypeInfo = GetTypeInfo(typeName);
    const TypeInfo* pNextTypeInfo = pTypeInfo + 1;
    if (!pTypeInfo || !pNextTypeInfo)
    {
        return nullptr;
    }
    else if (pTypeInfo->flags & TypeInfo_Flags_IsSystemType)
    {
        return ::winrt::make<XamlSystemBaseType>(typeName);
    }
    else
    {
        ::winrt::hstring baseName { pTypeInfo->baseTypeIndex >= 0 ? TypeInfos[pTypeInfo->baseTypeIndex].typeName : L""};
        ::winrt::hstring boxedName { pTypeInfo->boxedTypeIndex >= 0 ? TypeInfos[pTypeInfo->boxedTypeIndex].typeName : L""};
        auto userType = ::winrt::make_self<XamlUserType>(shared_from_this(), pTypeInfo->typeName, GetXamlTypeByName(baseName));
        userType->_kindOfType = pTypeInfo->kindOfType;
        userType->_activator = pTypeInfo->activator;
        userType->_collectionAdd = pTypeInfo->collectionAdd;
        userType->_dictionaryAdd = pTypeInfo->dictionaryAdd;
        userType->_fromStringConverter = pTypeInfo->fromStringConverter;
        userType->ContentPropertyName(pTypeInfo->contentPropertyName);
        userType->IsLocalType(pTypeInfo->flags & TypeInfo_Flags_IsLocalType);
        userType->IsReturnTypeStub(pTypeInfo->flags & TypeInfo_Flags_IsReturnTypeStub);
        userType->IsBindable(pTypeInfo->flags & TypeInfo_Flags_IsBindable);
        userType->IsMarkupExtension(pTypeInfo->flags & TypeInfo_Flags_IsMarkupExtension);
        userType->_createFromStringMethod = nullptr;
        userType->SetBoxedType(GetXamlTypeByName(boxedName));
        for (int i = pTypeInfo->firstMemberIndex; i < pNextTypeInfo->firstMemberIndex; ++i)
        {
            userType->AddMemberName(MemberInfos[i].shortName);
        }
        for (int i = pTypeInfo->firstEnumValueIndex; i < pNextTypeInfo->firstEnumValueIndex; ++i)
        {
            userType->AddEnumValue(EnumValues[i].name, winrt::Windows::Foundation::PropertyValue::CreateInt32(EnumValues[i].eValue));
        }
        return userType.as<IXamlType>();
    }
}

IXamlMember XamlTypeInfoProvider::CreateXamlMember(::winrt::hstring const& longMemberName)
{
    const MemberInfo* pMemberInfo = GetMemberInfo(longMemberName);
    if (!pMemberInfo)
    {
        return nullptr;
    }
    auto xamlMember = ::winrt::make_self<XamlMember>(shared_from_this(),
        pMemberInfo->shortName, TypeInfos[pMemberInfo->typeIndex].typeName);
    xamlMember->_getter = pMemberInfo->getter;
    xamlMember->_setter = pMemberInfo->setter;
    xamlMember->TargetTypeName(pMemberInfo->targetTypeIndex >= 0 ? TypeInfos[pMemberInfo->targetTypeIndex].typeName : L"");
    xamlMember->IsReadOnly(pMemberInfo->isReadOnly);
    xamlMember->IsDependencyProperty(pMemberInfo->isDependencyProperty);
    xamlMember->IsAttachable(pMemberInfo->isAttachable);

    return xamlMember.as<IXamlMember>();
}
} // namespace
